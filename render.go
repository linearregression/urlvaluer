// Copyright 2014 Brett Slatkin, Parker Moore
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"fmt"
	"io"
	"path/filepath"
	"strings"
	"text/template"
)

var (
	generatedTemplate = template.Must(template.New("render").Parse(`// generated by urlvaluer -- DO NOT EDIT
package {{.Package}}

import (
	"fmt"
	"net/url"
)
{{range .Types}}{{if not .IsUrlValuer}}
func (t {{.Struct.Name}}) UrlValues() url.Values {
	vals := url.Values{}
	{{range .Struct.Fields}}{{if .HasLen}}if len({{.Accessor "t"}}) > 0{{else}}
	if t.{{.Name}} != {{.Zero}}{{end}} { vals.Set("{{.SnakeCaseName}}", fmt.Sprint({{.Accessor "t"}})) }
	{{end}}
	return url.Values{}
}
{{end}}
{{end}}`))
)

type GeneratedType struct {
	Struct      StructSpec
	IsUrlValuer bool
}

type GeneratedTypes []GeneratedType

func (slice GeneratedTypes) Len() int {
	return len(slice)
}
func (slice GeneratedTypes) Less(i, j int) bool {
	return slice[i].Struct.Name < slice[j].Struct.Name
}
func (slice GeneratedTypes) Swap(i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

func getRenderedPath(inputPath string) (string, error) {
	if !strings.HasSuffix(inputPath, ".go") {
		return "", fmt.Errorf("Input path %s doesn't have .go extension", inputPath)
	}
	trimmed := strings.TrimSuffix(inputPath, ".go")
	dir, file := filepath.Split(trimmed)
	return filepath.Join(dir, fmt.Sprintf("%s_urlvaluer.go", file)), nil
}

type generateTemplateData struct {
	Package string
	Types   GeneratedTypes
}

func render(w io.Writer, packageName string, types GeneratedTypes) error {
	return generatedTemplate.Execute(w, generateTemplateData{packageName, types})
}
